[org 0x0100]
jmp start

num : dw 1, 3, 6, 5, 2

start :
	mov cx, 4
	mov dx, [num]
	mov ax, [num]
	mov bx, 0

	lp :
	add bx, 2
	cmp dx, [num + bx]
	jbe large

	cmp ax, [num + bx]
	ja small
	jmp low

	small :
mov ax, [num + bx]
jmp low

large :
mov dx, [num + bx]
jmp low

low :
sub cx, 1
jnz lp

jmp q2

q2 :

jmp start2

num1 : dw - 2, -3, -6, -5, -1

start2 :
mov si, 0
	mov di, 0
	mov bp, 0
	mov ax, 0
	mov bx, 0
	mov cx, 3
	mov bp, 0
	mov cx, 4
	mov dx, [num1]
	mov ax, [num1]
	mov bx, 0

	lp2 :
	add bx, 2
	cmp dx, [num1 + bx]
	jle largest

	cmp ax, [num1 + bx]
	jg smallest
	jmp low2

	smallest :
mov ax, [num1 + bx]
jmp low2

largest :
mov dx, [num1 + bx]
jmp low2

low2 :
sub cx, 1
jnz lp2

jmp q3

q3 :
jmp start3

set1 : dw 1, 4, 6, 0
set2 : dw 1, 3, 5, 8, 0
set3 : dw 0, 0, 0, 0, 0, 0, 0

start3 :
mov si, 0
	mov di, 0
	mov bp, 0
	mov ax, 0
	mov bx, 0
	mov cx, 3
	mov bp, 0
	mov cx, 4
	mov bx, 0
	mov bp, 0

	lp3 :
	mov si, [set1 + bx]
	mov di, [set2 + bx]
	cmp si, di
	jz onepass
	jmp place

	onepass :
mov[set3 + bp], di
add bp, 2
add bx, 2
sub cx, 1
jz q4
jmp lp3

place :
mov[set3 + bp], di
add bp, 2
add bx, 2
mov[set3 + bp], si
add bp, 2
sub cx, 1
jz q4
jmp lp3
jmp q4

q4 :
jmp begin

s1 : dw 1, 4, 6, 0
s2 : dw 1, 3, 6, 8, 0
s3 : dw 0, 0

begin :

	mov si, 0
	mov di, 0
	mov bp, 0
	mov ax, 0
	mov bx, 0
	mov cx, 3
	mov bp, 0

	outer :
mov bx, 0

inner :
	mov si, [s1 + bx]
	cmp si, [s2 + di]
	jz flag
	add di, 2
	cmp di, 8
	jnz inner
	mov di, 0
	add bx, 2
	sub cx, 1
	jnz inner
	jmp end


	flag :
mov[s3 + bp], si
add bp, 1
add bx, 2
cmp bx, 6
jnz inner
sub cx, 1
jz end


jmp q5
q5:
jmp outer2

set : dw 1, 2, 4, 1, 2, 3, 3, 1, 2, 5
subset : dw 1, 2, 3

outer2 :
mov si, 0
	mov di, 0
	mov bp, 0
	mov ax, 0
	mov bx, 0
	
mov cx, 3
	mov bp, 0
	mov bx, 0
	mov di, 0
	mov bp, 1

	inner2 :
	mov si, [subset + bx]
	cmp si, [set + di]
	jz comp2
	add di, 2
	add bp, 1
	cmp di, 20
	jnz inner2
	mov di, 0
	add bx, 2
	cmp bx, 6
	jz end
	jmp inner2

	comp2 :
mov si, [subset + bx + 2]
cmp si, [set + di + 2]
jz comp3
add di, 2
add bp, 1
jmp inner2

comp3 :
mov si, [subset + bx + 4]
cmp si, [set + di + 4]
jz flag2
add di, 2
add bp, 1
jmp inner2

flag2 :
jmp end

end :
mov ax, 0x4c00
int 0x21
