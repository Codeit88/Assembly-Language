#include<iostream>
using namespace std;
class Linklist {
	class Node {
	public:
		int data;
		Node* next;
		friend class Linklist;
		Node() {}
		Node(int data, Node* next) {
			this->data = data;
			this->next = next;
		}
		~Node() {
			delete next;
		}
	};
private:
	Node* head, * tail;
public:
	Linklist() {
		head = tail = NULL;
	}
	void insertathead(int const elem) {
		Node* temp = new Node;
		temp->data = elem;
		if (head == NULL) {
			temp->next = head;
			head = temp;
		}
		else {
			temp->next = head;
			head = temp;
		}
	}
	void insertAtTail(int const elem) {
		Node* temp = new Node;
		temp->data = elem;
		if (head == NULL) {
			temp->next = head;
			head = temp;
		}
		else {
			tail->next = temp;
			temp->next = NULL;
			tail = temp;
		}
	}
	void merge(Linklist l) {
		Node* temp = head;
		while (temp->next != NULL) {
			temp = temp->next;
		}
		if (temp->next == NULL) {
			temp->next = l.head;
			this->tail = l.tail;
		}
		}
	void split(int val) {
		int count = 1;
		Node* temp = head;
		while (temp != NULL) {
			temp = temp->next;
			count++;
			if (count == val) {
				temp->next = NULL;
				this->tail = temp;
			}
		}
	}
	void printForward() const {
		Node* temp = head;
		while (temp != NULL) {
			cout << temp->data << "->";
			temp = temp->next;
		}
		cout << "NULL";
		cout << endl;
	}
};



int main() {
	Linklist l1, l2;
	l1.insertathead(42);
	l1.insertathead(24);
	l1.insertathead(32);
	l1.insertathead(12);
	l1.insertathead(41);
	l1.insertathead(85);
	l1.printForward();
	l2.insertathead(32);
	l2.insertathead(10);
	l2.insertathead(38);
	l2.insertathead(14);
	l2.insertathead(41);
	l2.printForward();
	l1.merge(l2);
	l1.printForward();
	l1.split(5);
	l1.printForward();
	return 0;
}
